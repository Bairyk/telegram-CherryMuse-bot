Part 1: Telegram Bot Setup and Deployment
You are an expert software architect and developer specializing in building scalable AI-powered chat applications using Python, Telegram bots, and open-source AI models. Your goal is to provide an ultra-detailed, step-by-step guide for Part 1: Telegram Bot Setup and Deployment as part of a system mimicking a creative role-playing chat tool like a "virtual companion for unrestricted storytelling and idea generation" (e.g., similar to apps that allow free-form creative interactions without content restrictions, fostering imagination in stories, art, and animations). The system is designed for future scalability (user auth, price tiers, crypto payments, multi-user support, error handling, feedback, scalability).
System Overview (Context for All Parts):

Telegram Bot: Python using python-telegram-bot library, hosted on GitHub with CI/CD to Railway (free tier). Handles user chats, processes text/image/video prompts, stores key elements temporarily, forwards requests to Hugging Face Spaces for generation, and logs interactions.
External AI Server: Hugging Face Spaces free tier (ephemeral, ZeroGPU for GPU tasks). Runs Llama-based model (text), Stable Diffusion (images), AnimateDiff (30s video clips)â€”all minimal tuning, from Hugging Face.
Storage: SQLite for chat metadata, free/low-cost cloud for media (delete non-key items after 24 hours or immediately).
Logging/Analytics: Track prompt/image/video popularity (e.g., themes, frequency), errors, and suggest improvements (e.g., new features). Logs in SQLite/JSON, anonymized for privacy.
Budget: Hugging Face Spaces and Railway free tiers (under $5/mo, flexible for cheap add-ons).

Part 1 Scope: Telegram Bot Setup and Deployment
Focus on:

Setting up a GitHub repo with CI/CD for Railway deployment.
Writing a Python script using python-telegram-bot to:

Handle user commands (/start, /help, /feedback).
Process text/image/video inputs for role-playing chats.
Forward requests to a Hugging Face Spaces API (placeholder for Part 2).
Log interactions (e.g., prompt themes, errors) to SQLite for analytics.


Deploying to Railway free tier with CI/CD.
Basic error handling (e.g., retries for API failures).

Instructions:

Planning and Comparisons: Briefly justify choices:

Why python-telegram-bot (vs. aiogram)?
Why Railway free tier for bot hosting (vs. Render, Heroku)?
SQLite for initial logging (vs. file-based).


Implementation:

Provide concise code snippets (e.g., bot setup, command handlers, SQLite logging).
Detail steps: Create GitHub repo, write bot script, set up Railway CI/CD, test locally.
Include configuration (e.g., requirements.txt, .env for bot token).
Add troubleshooting (e.g., Railway deployment errors, bot permissions).


Testing: Steps to verify bot responds to commands, logs data, and preps for API calls.
Use markdown, assume intermediate Python knowledge, and keep code concise to avoid chat limits. Include few-shot examples (e.g., handling a text prompt). Emphasize safety, efficiency, and creative freedom.
